一、概述
        模板方法模式是类的行为模式。准备一个抽象类，在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，
重新定义算法中某些步骤。

二、涉及角色
        这个模式涉及到两个角色：
   1、抽象模板（Abstract Template）角色有如下责任：
		1）定义了一个或多个抽象操作，以便让子类实现。
		2）定义并实现了一个模板方法。它给出了一个算法的骨架。
   2、具体模板（Concrete Template）角色有如下责任：
		1）实现父类所定义的一个或多个抽象方法

三、模式实现
        在实现模板方法模式时，开发抽象类的软件设计师和开发具体子类的软件设计师之间可以进行协作。一个设计师负责给出一个算法的轮廓和框架，另一些设计师则负责给出这个算法的各个逻辑步骤。
实现这些具体逻辑步骤的方法即为基本方法，而将这些基本方法汇总起来的方法即为模板方法，模板方法模式的名字也因此而来。下面将详细介绍模板方法和基本方法：
   1. 模板方法
       一个模板方法是定义在抽象类中的、把基本操作方法组合在一起形成一个总算法或一个总行为的方法。这个模板方法定义在抽象类中，并由子类不加以修改地完全继承下来。模板方法是一个具体方法，
      它给出了一个顶层逻辑框架，而逻辑的组成步骤在抽象类中可以是具体方法，也可以是抽象方法。由于模板方法是具体方法，因此模板方法模式中的抽象层只能是抽象类，而不是接口。
   2. 基本方法
       基本方法是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。
   (1) 抽象方法：一个抽象方法由抽象类声明、由其具体子类实现。
   (2) 具体方法：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。
   (3) 钩子方法：一个钩子方法由一个抽象类或具体类声明并实现，而其子类可能会加以扩展。通常在父类中给出的实现是一个空实现（可使用virtual关键字将其定义为虚函数），并以该空实现作为方法的默认实现，当然钩子方法也可以提供一个非空的默认实现。
       在模板方法模式中，钩子方法有两类：第一类钩子方法可以与一些具体步骤“挂钩”，以实现在不同条件下执行模板方法中的不同步骤，这类钩子方法的返回类型通常是bool类型的，这类方法名一般为IsXXX()，用于对某个条件进行判断，如果条件满足则执行某一步骤，否则将不执行
      
四、应用场景
        某软件公司欲为某银行的业务支撑系统开发一个利息计算模块，利息计算流程如下：
   (1) 系统根据账号和密码验证用户信息，如果用户信息错误，系统显示出错提示；
   (2) 如果用户信息正确，则根据用户类型的不同使用不同的利息计算公式计算利息（如活期账户和定期账户具有不同的利息计算公式）；
   (3) 系统显示利息。
         试使用模板方法模式设计该利息计算模块。 
       
总结：模板模式的关键是：子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。