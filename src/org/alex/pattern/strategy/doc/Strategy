一、概述
        策略模式定义了一系列的算法，并将每一个算法封装到具有共同接口的独立的类中，从而使它们可以相互替换。
重新定义算法中某些步骤。

二、涉及角色
        这个模式涉及到三个角色：
   1、抽象策略（Strategy）角色：
		1）给出所有的具体策略类所需的接口。一般是接口或者抽象类。
   2、具体策略（ConcreteStrategy）角色：
		1）包装了相关的算法或行为
   3、环境（Context）角色
        1）持有一个Strategy的引用

三、模式实现
      
四、应用场景
        假设现在要设计一个贩卖各类书籍的电子商务网站的购物车系统。一个最简单的情况就是把所有货品的单价乘上数量，但是实际情况肯定比这要复杂。比如，本网站可能对所有的高级会员提供每本20%的促销折扣；对中级会员提供每本10%的促销折扣；对初级会员没有折扣。
　　根据描述，折扣是根据以下的几个算法中的一个进行的：
　　算法一：对初级会员没有折扣。
　　算法二：对中级会员提供10%的促销折扣。
　　算法三：对高级会员提供20%的促销折扣。
       
五、总结
        策略模式优缺点
        优点：
      1）策略模式提供了管理相关算法族的办法，使用策略模式可以避免使用多重条件（if-else）语句。
        缺点：
      1）客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。
      2）由于策略模式把每个具体的策略实现都单独封装成类，如果备选的策略很多，会增加系统维护类的数量